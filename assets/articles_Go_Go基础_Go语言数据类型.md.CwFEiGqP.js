import{_ as t,c as e,o as l,a1 as n}from"./chunks/framework.CJ8LAyNs.js";const c=JSON.parse('{"title":"Go 语言数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Go/Go基础/Go语言数据类型.md","filePath":"articles/Go/Go基础/Go语言数据类型.md"}'),a={name:"articles/Go/Go基础/Go语言数据类型.md"},r=n('<h1 id="go-语言数据类型" tabindex="-1">Go 语言数据类型 <a class="header-anchor" href="#go-语言数据类型" aria-label="Permalink to &quot;Go 语言数据类型&quot;">​</a></h1><p>在 Go 编程语言中，数据类型用于声明函数和变量。</p><p>数据类型的出现是为了把数据分成所需内存大小不同的数据，编程的时候需要用大数据的时候才需要申请大内存，就可以充分利用内存。</p><p>Go 语言按类别有以下几种数据类型：</p><table tabindex="0"><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">类型和描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;"><strong>布尔型</strong> 布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool = true。</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;"><strong>数字类型</strong> 整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;"><strong>字符串类型:</strong> 字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;"><strong>派生类型:</strong> 包括：(a) 指针类型（Pointer）(b) 数组类型(c) 结构化类型(struct)(d) Channel 类型(e) 函数类型(f) 切片类型(g) 接口类型（interface）(h) Map 类型</td></tr></tbody></table><hr><h2 id="数字类型" tabindex="-1">数字类型 <a class="header-anchor" href="#数字类型" aria-label="Permalink to &quot;数字类型&quot;">​</a></h2><p>Go 也有基于架构的类型，例如：int、uint 和 uintptr。</p><table tabindex="0"><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">类型和描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;"><strong>uint8</strong> 无符号 8 位整型 (0 到 255)</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;"><strong>uint16</strong> 无符号 16 位整型 (0 到 65535)</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;"><strong>uint32</strong> 无符号 32 位整型 (0 到 4294967295)</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;"><strong>uint64</strong> 无符号 64 位整型 (0 到 18446744073709551615)</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;"><strong>int8</strong> 有符号 8 位整型 (-128 到 127)</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;"><strong>int16</strong> 有符号 16 位整型 (-32768 到 32767)</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;"><strong>int32</strong> 有符号 32 位整型 (-2147483648 到 2147483647)</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;"><strong>int64</strong> 有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)</td></tr></tbody></table><h3 id="浮点型" tabindex="-1">浮点型 <a class="header-anchor" href="#浮点型" aria-label="Permalink to &quot;浮点型&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">类型和描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;"><strong>float32</strong> IEEE-754 32位浮点型数</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;"><strong>float64</strong> IEEE-754 64位浮点型数</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;"><strong>complex64</strong> 32 位实数和虚数</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;"><strong>complex128</strong> 64 位实数和虚数</td></tr></tbody></table><hr><h2 id="其他数字类型" tabindex="-1">其他数字类型 <a class="header-anchor" href="#其他数字类型" aria-label="Permalink to &quot;其他数字类型&quot;">​</a></h2><p>以下列出了其他更多的数字类型：</p><table tabindex="0"><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">类型和描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;"><strong>byte</strong> 类似 uint8</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;"><strong>rune</strong> 类似 int32</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;"><strong>uint</strong> 32 或 64 位</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;"><strong>int</strong> 与 uint 一样大小</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;"><strong>uintptr</strong> 无符号整型，用于存放一个指针</td></tr></tbody></table>',15),d=[r];function s(o,i,g,f,x,y){return l(),e("div",null,d)}const _=t(a,[["render",s]]);export{c as __pageData,_ as default};
