import{_ as s,c as i,o as a,a1 as e}from"./chunks/framework.CJ8LAyNs.js";const g=JSON.parse('{"title":"Go错误处理：Panic和Recover","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Go/Go基础/Go错误处理：Panic和Recover.md","filePath":"articles/Go/Go基础/Go错误处理：Panic和Recover.md"}'),n={name:"articles/Go/Go基础/Go错误处理：Panic和Recover.md"},p=e(`<h1 id="go错误处理-panic和recover" tabindex="-1">Go错误处理：Panic和Recover <a class="header-anchor" href="#go错误处理-panic和recover" aria-label="Permalink to &quot;Go错误处理：Panic和Recover&quot;">​</a></h1><h2 id="panic" tabindex="-1">Panic <a class="header-anchor" href="#panic" aria-label="Permalink to &quot;Panic&quot;">​</a></h2><p>Go语言追求简洁优雅，所以，Go语言不支持传统的 try…catch…finally 这种异常，因为Go语言的设计者们认为，将异常与控制结构混在一起会很容易使得代码变得混乱。因为开发者很容易滥用异常，甚至一个小小的错误都抛出一个异常。在Go语言中，使用多值返回来返回错误。不要用异常代替错误，更不要用来控制流程。在极个别的情况下，也就是说，遇到真正的异常的情况下（比如除数为 0了）。才使用Go中引入的Exception处理：defer, panic, recover。</p><p>这几个异常的使用场景可以这么简单描述：Go中可以抛出一个panic的异常，然后在defer中通过recover捕获这个异常，然后正常处理。</p><p>可以将 <code>panic</code> 想象成一种病毒，因为它会在程序中不断向上传播，直到最终导致程序崩溃。当发生 <code>panic</code> 时，程序会立即停止当前函数的执行，并开始向上返回调用栈，依次执行每个函数的 <code>defer</code>，直到到达最外层的函数为止。在这个过程中，如果有函数中的 <code>defer</code> 使用了 <code>recover()</code> 来捕获 <code>panic</code>，并且处理了异常，那么程序可能会继续执行下去，否则会导致程序崩溃。</p><p>因此，如果 <code>panic</code> 没有得到适当处理，它的确会像一种病毒一样在程序中传播，最终导致整个程序的崩溃。这也是在编写 Go 代码时需要注意避免滥用 <code>panic</code>，以及确保正确处理异常的重要原因之一。</p><h3 id="实例" tabindex="-1"><strong>实例</strong> <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;**实例**&quot;">​</a></h3><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     defer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){ </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 必须要先声明defer，否则不能捕获到panic异常</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">recover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里的err其实就是panic传入的内容，55</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;e&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//开始调用f</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;f&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//这里开始下面代码不会再执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    panic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;异常信息&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//这里开始下面代码不会再执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;f&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="输出结果" tabindex="-1"><strong>输出结果：</strong> <a class="header-anchor" href="#输出结果" aria-label="Permalink to &quot;**输出结果：**&quot;">​</a></h3><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>c</span></span>
<span class="line"><span>a</span></span>
<span class="line"><span>d</span></span>
<span class="line"><span>异常信息</span></span>
<span class="line"><span>e</span></span></code></pre></div><p>解释：代码由上向下执行。遇到defer func，将对应内容压入栈等待执行；调用func f时出现了panic，逆序调用defer func实现错误处理.在发生 <code>panic</code> 后，程序将立即转移到 <code>defer</code> 声明的函数，而 <code>panic</code> 发生后，当前函数内剩余的代码将不再执行。在这段代码中，<code>defer</code> 声明了一个匿名函数，其中包含了对 <code>recover()</code> 的调用。当 <code>panic</code> 发生时，程序会立即跳转到这个匿名函数，并执行其中的代码。<code>recover()</code> 函数会捕获当前的 <code>panic</code> 异常，并返回其传递的值（在这个例子中就是 &quot;异常信息&quot;），如果没有发生 <code>panic</code>，<code>recover()</code> 返回 <code>nil</code>。然后，程序继续执行匿名函数中的其他代码，即输出 &quot;异常信息&quot; 后面的 &quot;e&quot;。</p><h2 id="recover" tabindex="-1">Recover <a class="header-anchor" href="#recover" aria-label="Permalink to &quot;Recover&quot;">​</a></h2><p>在Go语言中，<code>recover</code> 函数用于在 <code>defer</code> 声明的函数中捕获 <code>panic</code> 异常。当 <code>panic</code> 发生时，<code>recover</code> 可以用于恢复程序的执行，并获取 <code>panic</code> 传递的值。</p><p><code>recover()</code> 函数的逻辑是用于从 <code>panic</code> 异常中恢复，并且只能在 <code>defer</code> 声明的函数中使用。当程序在执行过程中发生了 <code>panic</code>，如果有 <code>defer</code> 声明的函数调用了 <code>recover()</code>，则程序会从 <code>panic</code> 的位置恢复执行。</p><p><code>recover()</code> 有以下几个特点和逻辑：</p><ol><li><code>recover()</code> 只能在 <code>defer</code> 声明的函数中有效。如果在没有发生 <code>panic</code> 的情况下调用 <code>recover()</code>，它会返回 <code>nil</code>。</li><li>如果在 <code>defer</code> 声明的函数中调用了 <code>recover()</code>，并且在该函数内发生了 <code>panic</code>，<code>recover()</code> 将会返回 <code>panic</code> 的值，并且 <code>panic</code> 的流程会被停止。</li><li>如果在 <code>defer</code> 声明的函数中调用了 <code>recover()</code>，但是在该函数内并未发生 <code>panic</code>，<code>recover()</code> 会返回 <code>nil</code>。</li><li>如果在 <code>defer</code> 声明的函数外调用 <code>recover()</code>，它将返回 <code>nil</code>，并且不会对 <code>panic</code> 进行捕获和处理。</li></ol><p>一般情况下，<code>recover()</code> 用于从 <code>panic</code> 中恢复，并执行一些必要的清理工作或者进行错误处理，以保证程序的正常运行或者优雅地处理异常情况。</p>`,17),t=[p];function l(c,h,o,d,k,r){return a(),i("div",null,t)}const y=s(n,[["render",l]]);export{g as __pageData,y as default};
